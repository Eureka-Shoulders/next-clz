import { Grid } from '@mui/material';
import { useRouter } from 'next/router';
import useTranslation from '@core/hooks/useTranslation';
import { zodValidator } from '@core/utils/validators';
import { useNotificationService } from '@hooks/services';
import { EntityStore } from '@euk-labs/fetchx';
import { Formix } from '@euk-labs/formix';
import {
  FXSubmitButton,
  FXTextField,
} from '@euk-labs/formix-mui';

import { <%= props.resourceEntityNameCapitalized %>Schema } from '../<%= props.resourceEntityName %>.schema';

interface Props {
  <%= props.resourceEntityName %>Entity: EntityStore;
}

function Update<%= props.resourceEntityNameCapitalized %>Form({ <%= props.resourceEntityName %>Entity }: Props) {
  const { translate } = useTranslation();
  const router = useRouter();
  const notificationService = useNotificationService();

  async function handleSubmit(values: <%= props.resourceEntityNameCapitalized %>Schema) {
    const onSuccess = () => {
      router.push('/<%= props.resourceName %>');
    };

    await notificationService.handleHttpRequest(
      () => <%= props.resourceEntityName %>Entity.update(values),
      {
        feedbackSuccess: translate('feedbacks.<%= props.resourceEntityName %>.updated'),
        feedbackError: translate('errors.<%= props.resourceName %>.update'),
        onSuccess,
      }
    );
  }

  return (
    <Formix
      initialValues={<%= props.resourceEntityName %>Entity.data as <%= props.resourceEntityNameCapitalized %>Schema}
      validate={zodValidator(<%= props.resourceEntityNameCapitalized %>Schema)}
      onSubmit={handleSubmit}
    >
      <Grid container spacing={2}>
        <Grid item xs={6}>
          <FXTextField name="name" label={translate('common.name')} />
        </Grid>

        <Grid item xs={12} display="flex" justifyContent="flex-end">
          <FXSubmitButton label={translate('actions.save')} />
        </Grid>
      </Grid>
    </Formix>
  );
}

export default Update<%= props.resourceEntityNameCapitalized %>Form;
