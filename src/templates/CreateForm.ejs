import { Grid } from '@mui/material'
import { useRouter } from 'next/router'
import useTranslation from '@core/hooks/useTranslation'
import { zodValidator } from '@core/utils/validators'
import { use<%= props.resourceNameCapitalized %>Repository } from '@hooks/repositories'
import { useNotificationService } from '@hooks/services'
import { Formix } from '@euk-labs/formix'
import {
  FXSubmitButton,
  FXTextField,
} from '@euk-labs/formix-mui'

import { initialValuesForCreate } from '../initialValues'
import { <%= props.resourceEntityNameCapitalized %>Schema } from '../<%= props.resourceEntityName %>.schema'

function Create<%= props.resourceEntityNameCapitalized %>Form() {
  const { translate } = useTranslation()
  const router = useRouter()
  const notificationService = useNotificationService()
  const <%= props.resourceName %>Repository = use<%= props.resourceNameCapitalized %>Repository()

  async function handleSubmit(values: <%= props.resourceEntityNameCapitalized %>Schema) {
    const onSuccess = () => {
      router.push('/<%= props.resourceName %>')
    }

    await notificationService.handleHttpRequest(
      () => <%= props.resourceName %>Repository.create(values),
      {
        feedbackSuccess: translate('feedbacks.<%= props.resourceEntityName %>.created'),
        feedbackError: translate('errors.<%= props.resourceName %>.creation'),
        onSuccess,
      }
    )
  }

  return (
    <Formix
      initialValues={initialValuesForCreate}
      validate={zodValidator(<%= props.resourceEntityNameCapitalized %>Schema)}
      onSubmit={handleSubmit}
    >
      <Grid container spacing={2}>
        <Grid item xs={6}>
          <FXTextField name="name" label={translate('common.name')} />
        </Grid>

        <Grid item xs={12} display="flex" justifyContent="flex-end">
          <FXSubmitButton label={translate('actions.save')} />
        </Grid>
      </Grid>
    </Formix>
  )
}

export default Create<%= props.resourceEntityNameCapitalized %>Form
